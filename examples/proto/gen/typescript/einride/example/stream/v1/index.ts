// Code generated by protoc-gen-typescript-http. DO NOT EDIT.
/* eslint-disable camelcase */
// @ts-nocheck

export type SingleRequest = {
  name: string | undefined;
};

export type SingleResponse = {
  name: string | undefined;
};

export type StreamRequest = {
  name: string | undefined;
};

export type StreamResponse = {
  name: string | undefined;
};

export interface StreamService {
  Single(request: SingleRequest): Promise<SingleResponse>;
}

type RequestType = {
  path: string;
  method: string;
  body: string | null;
};

type RequestHandler = (request: RequestType, meta: { service: string, method: string }) => Promise<unknown>;

export function createStreamServiceClient(
  handler: RequestHandler
): StreamService {
  return {
    Single(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.name) {
        throw new Error("missing required field request.name");
      }
      const path = `v1/${request.name}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "StreamService",
        method: "Single",
      }) as Promise<SingleResponse>;
    },
  };
}

// @@protoc_insertion_point(typescript-http-eof)
